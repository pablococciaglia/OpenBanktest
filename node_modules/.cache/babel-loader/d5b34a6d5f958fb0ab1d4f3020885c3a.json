{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cocci\\\\Desktop\\\\react\\\\openbankbase\\\\ok-test-main\\\\src\\\\Openbank.js\";\nimport React, { useState } from 'react';\nimport { Context } from './components/Context';\nimport { AppRouter } from './router/AppRouter';\nexport const Openbank = () => {\n  /* se declaran 3 useState, que serán utilizados dentro del Context para distribuirlos por toda la aplicación */\n  const [checkpoints, setcheckpoints] = useState({\n    'acceptContract': false,\n    'passwordAccepted': false\n  }); //será utilizado como control de las rutas privadas, asi el usuario no tendrá acceso en el caso de no haber pasado alguno de los checkpoints\n\n  const [activeStep, setActiveStep] = useState(0); //se utilizará para configurar el Step-Progress-Bar\n\n  const [apiresponse, setapiresponse] = useState({\n    'status': ''\n  }); //se utilizará para pasar los datos de la respuesta de la api a la pantalla de feedback\n\n  return (\n    /*#__PURE__*/\n\n    /* El Context.provider envuelve a las rutas de la apicación para que todas esas rutas tengan acceso al context */\n    React.createElement(Context.Provider, {\n      value: {\n        checkpoints,\n        setcheckpoints,\n        activeStep,\n        setActiveStep,\n        apiresponse,\n        setapiresponse\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }, \" el\", /*#__PURE__*/React.createElement(AppRouter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }))\n  );\n};","map":{"version":3,"sources":["C:/Users/cocci/Desktop/react/openbankbase/ok-test-main/src/Openbank.js"],"names":["React","useState","Context","AppRouter","Openbank","checkpoints","setcheckpoints","activeStep","setActiveStep","apiresponse","setapiresponse"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAE1B;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC;AAAC,sBAAiB,KAAlB;AAAyB,wBAAmB;AAA5C,GAAD,CAA9C,CAJ0B,CAIyE;;AACnG,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,CAAD,CAA5C,CAL0B,CAKuB;;AACjD,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC;AAAC,cAAU;AAAX,GAAD,CAA9C,CAN0B,CAMqC;;AAE/D;AAAA;;AAEI;AACA,wBAAC,OAAD,CAAS,QAAT;AAAkB,MAAA,KAAK,EAAG;AAACI,QAAAA,WAAD;AAAcC,QAAAA,cAAd;AAA8BC,QAAAA,UAA9B;AAA0CC,QAAAA,aAA1C;AAAyDC,QAAAA,WAAzD;AAAsEC,QAAAA;AAAtE,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAHJ;AAQH,CAhBM","sourcesContent":["import React, { useState } from 'react'\r\nimport { Context } from './components/Context'\r\nimport { AppRouter } from './router/AppRouter'\r\n\r\nexport const Openbank = () => {\r\n\r\n    /* se declaran 3 useState, que serán utilizados dentro del Context para distribuirlos por toda la aplicación */\r\n    \r\n    const [checkpoints, setcheckpoints] = useState({'acceptContract':false, 'passwordAccepted':false}) //será utilizado como control de las rutas privadas, asi el usuario no tendrá acceso en el caso de no haber pasado alguno de los checkpoints\r\n    const [activeStep, setActiveStep] = useState(0); //se utilizará para configurar el Step-Progress-Bar\r\n    const [apiresponse, setapiresponse] = useState({'status': ''}) //se utilizará para pasar los datos de la respuesta de la api a la pantalla de feedback\r\n    \r\n    return (\r\n        \r\n        /* El Context.provider envuelve a las rutas de la apicación para que todas esas rutas tengan acceso al context */\r\n        <Context.Provider value ={{checkpoints, setcheckpoints, activeStep, setActiveStep, apiresponse, setapiresponse}}> el\r\n            <AppRouter />\r\n        </Context.Provider>\r\n    )\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}