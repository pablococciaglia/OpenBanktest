{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cocci\\\\Desktop\\\\react\\\\openbankbase\\\\ok-test-main\\\\src\\\\components\\\\Form\\\\CreatePasswordScreen.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { CheckItems } from './CheckItems';\nimport { Context } from '../Context';\nimport { submitForm } from '../../services/api';\nimport { Loading } from './Loading';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport triangulo from '../../assets/img/triangulo.png';\nexport const CreatePasswordScreen = () => {\n  /* declaración de constantes, useState y se traen elementos del context */\n  const history = useHistory(); //para hacer redirección a links\n\n  const {\n    checkpoints,\n    setcheckpoints,\n    setActiveStep,\n    setapiresponse\n  } = useContext(Context); // Elementos del Context\n  // maneja la renderización de la pantalla del loading cuando se hace la petición a la api, ademas desactiva los botones de siguiente o cancelar para controlar la interfaz de usuario\n\n  const [isLoading, setisLoading] = useState(false); //maneja mostrar y ocultar contraseña, ademas del icono utilizado para esta funcion\n\n  const [showPass, setshowPass] = useState({\n    'show': \"password\",\n    'icon': \"screen2__eyeicon bi bi-eye-slash\"\n  }); //maneja mostrar y ocultar la confirmación de la contraseña, ademas del icono utilizado para esta funcion\n\n  const [showconfimrPass, setshowconfimrPass] = useState({\n    'show': \"password\",\n    'icon': \"screen2__eyeicon bi bi-eye-slash\"\n  });\n  /* Manejadores de eventos */\n  //controlador del boton \"cancelar\", seteando la aceptación del contrato en false para que no pueda volver a entrar ya que la ruta es privada\n\n  const handleReturnHome = () => {\n    setcheckpoints({ ...checkpoints,\n      'acceptContract': false\n    });\n    history.push('./');\n  }; //controlador del icono para mostrar contraseña, seteando el icono del ojo abierto y pasando la contraseña a type=text, funciona como pulsador, haciendo toogle cuando se suelta el mouse o se sale de encima del icono\n\n\n  const handleShowPass = event => {\n    if (event.type === \"mousedown\") {\n      setshowPass({\n        'show': \"text\",\n        'icon': \"screen2__eyeicon bi bi-eye\"\n      });\n    } else {\n      setshowPass({\n        'show': \"password\",\n        'icon': \"screen2__eyeicon bi bi-eye-slash\"\n      });\n    }\n  }; //controlador del icono para mostrar la confirmación de la contraseña, seteando el icono del ojo abierto y pasando la contraseña a type=text\n\n\n  const handleShowconfirmPass = event => {\n    if (event.type === \"mousedown\") {\n      setshowconfimrPass({\n        'show': \"text\",\n        'icon': \"screen2__eyeicon bi bi-eye\"\n      });\n    } else {\n      setshowconfimrPass({\n        'show': \"password\",\n        'icon': \"screen2__eyeicon bi bi-eye-slash\"\n      });\n    }\n  }; //useEffect para que ejecute el cambio del step-progress-bar\n\n\n  useEffect(() => {\n    setActiveStep(1);\n  }, [setActiveStep]);\n  /* reglas de validación del formulario */\n\n  const validate = Yup.object({\n    password: Yup.string().min(8, 'La contraseña debe poseer al menos 8 caracteres').required('La contraseña es requerida').matches(/^.*((?=.*[0-9]){1}).*$/, \"La contraseña debe poseer al menos un número\").matches(/^.*((?=.*[A-Z]){1}).*$/, \"La contraseña debe poseer al menos una mayúscula\").matches(/^.*((?=.*[a-z]){1}).*$/, \"La contraseña debe poseer al menos una minúscula\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Las contraseñas deben coincidir').required('La confirmación de contraseña es requerida'),\n    pista: Yup.string().max(255, 'La pista no puede superar los 255 caracteres')\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"img\", {\n    src: triangulo,\n    alt: \"triangulo\",\n    className: \"screen2__triangulo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), \"  \", isLoading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__content animate__animated animate__fadeIn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"Crea tu Password Manager\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"En primer lugar, debes crear una contrase\\xF1a diferente para tus pertenencias electr\\xF3nicas. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 103\n    }\n  }), \"No podr\\xE1s recuperar tu contrase\\xF1a, as\\xED que recu\\xE9rdala bien.\"), /*#__PURE__*/React.createElement(Formik\n  /* control de los campos del formulario, indicando valores iniciales para cada campo */\n  , {\n    initialValues: {\n      password: '',\n      confirmPassword: '',\n      pista: ''\n    },\n    validationSchema: validate\n    /* se ingresan las reglas de validación de formulario que ya se declararon */\n    ,\n    onSubmit: values => {\n      /* llamado a la API pasando los valores recogidos del formulario */\n      setisLoading(true);\n      /* se controla la interfaz de usuario con una pantalla de loading */\n\n      submitForm(values.password, values.confirmPassword, values.pista).then(response => setapiresponse(response))\n      /* Se guardan los valores de la respuesta en el context para que luego los tome la pantalla de feedback */\n      .catch(function (err) {\n        console.log(err); //si bien el manejo del error es tenido en cuenta ya que en la pantalla de feedback mostrará que no se puedo crear Password Manager hago un console.log del error por control de programación\n      }).finally(setTimeout(() => {\n        setcheckpoints({ ...checkpoints,\n          'passwordAccepted': true\n        });\n        /* Se setea un checkpoint de envío de contraseña para acceder a la ruta privada del feedback */\n\n        history.push('./response'); //se redirecciona a la pantalla de feedback\n      }, 3020));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, formik => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__rulesbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CheckItems, {\n    values: formik.values,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__passwordsbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Crea tu Contrase\\xF1a Maestra\",\n    name: \"password\",\n    type: showPass.show,\n    placeholder: \"Elige una contrase\\xF1a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__eyeiconbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    onMouseDown: handleShowPass,\n    onMouseLeave: handleShowPass,\n    onMouseUp: handleShowPass,\n    className: showPass.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Repite tu Contrase\\xF1a Maestra\",\n    name: \"confirmPassword\",\n    type: showconfimrPass.show,\n    placeholder: \"Repite tu contrase\\xF1a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__eyeiconbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    onMouseDown: handleShowconfirmPass,\n    onMouseLeave: handleShowconfirmPass,\n    onMouseUp: handleShowconfirmPass,\n    className: showconfimrPass.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__pistabox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, \"Tambi\\xE9n puedes crear una pista que te ayude a recordar tu contrase\\xF1a maestra. \\xA0\", /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Solo admite hasta 255 caracteres\",\n    placement: \"top\",\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-info-circle screen2__infoicon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 93\n    }\n  }))), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Crea tu pista para recordar tu contrase\\xF1a maestra (opcional)\",\n    maxLength: \"255\",\n    name: \"pista\",\n    type: \"text\",\n    placeholder: \"Introduce tu pista\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"screen2__contadorbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"screen2__contador\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 57\n    }\n  }, formik.values.pista.length, \"/255\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__buttonbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading,\n    className: \"btn btn-light\",\n    type: \"reset\",\n    onClick: handleReturnHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  }, \"Cancelar\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading,\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  }, \"Siguiente \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-chevron-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 100\n    }\n  }))))))));\n};","map":{"version":3,"sources":["C:/Users/cocci/Desktop/react/openbankbase/ok-test-main/src/components/Form/CreatePasswordScreen.js"],"names":["React","useContext","useState","useEffect","useHistory","Formik","Form","Yup","TextField","CheckItems","Context","submitForm","Loading","Tooltip","triangulo","CreatePasswordScreen","history","checkpoints","setcheckpoints","setActiveStep","setapiresponse","isLoading","setisLoading","showPass","setshowPass","showconfimrPass","setshowconfimrPass","handleReturnHome","push","handleShowPass","event","type","handleShowconfirmPass","validate","object","password","string","min","required","matches","confirmPassword","oneOf","ref","pista","max","values","then","response","catch","err","console","log","finally","setTimeout","formik","show","icon","length"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {Formik, Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextField } from './TextField';\r\nimport { CheckItems } from './CheckItems';\r\nimport { Context } from '../Context';\r\nimport { submitForm } from '../../services/api';\r\nimport { Loading } from './Loading';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport triangulo from '../../assets/img/triangulo.png'\r\n\r\n\r\nexport const CreatePasswordScreen = () => {\r\n\r\n  /* declaración de constantes, useState y se traen elementos del context */\r\n  const history = useHistory(); //para hacer redirección a links\r\n\r\n  const {checkpoints, setcheckpoints, setActiveStep, setapiresponse} = useContext (Context); // Elementos del Context\r\n\r\n  // maneja la renderización de la pantalla del loading cuando se hace la petición a la api, ademas desactiva los botones de siguiente o cancelar para controlar la interfaz de usuario\r\n  const [isLoading, setisLoading] = useState(false); \r\n\r\n  //maneja mostrar y ocultar contraseña, ademas del icono utilizado para esta funcion\r\n  const [showPass, setshowPass] = useState({'show':\"password\", 'icon':\"screen2__eyeicon bi bi-eye-slash\"})\r\n\r\n  //maneja mostrar y ocultar la confirmación de la contraseña, ademas del icono utilizado para esta funcion\r\n  const [showconfimrPass, setshowconfimrPass] = useState({'show':\"password\", 'icon':\"screen2__eyeicon bi bi-eye-slash\"})\r\n\r\n  \r\n  /* Manejadores de eventos */\r\n  //controlador del boton \"cancelar\", seteando la aceptación del contrato en false para que no pueda volver a entrar ya que la ruta es privada\r\n  const handleReturnHome = () =>{\r\n    setcheckpoints({...checkpoints, 'acceptContract':false})\r\n    history.push('./');\r\n  }\r\n\r\n  //controlador del icono para mostrar contraseña, seteando el icono del ojo abierto y pasando la contraseña a type=text, funciona como pulsador, haciendo toogle cuando se suelta el mouse o se sale de encima del icono\r\n  const handleShowPass = (event) => {\r\n    if (event.type === \"mousedown\") {\r\n      setshowPass({'show':\"text\", 'icon':\"screen2__eyeicon bi bi-eye\"})\r\n    } else {\r\n      setshowPass({'show':\"password\", 'icon':\"screen2__eyeicon bi bi-eye-slash\"})\r\n    } \r\n  }\r\n\r\n  //controlador del icono para mostrar la confirmación de la contraseña, seteando el icono del ojo abierto y pasando la contraseña a type=text\r\n  const handleShowconfirmPass = (event) => {\r\n    if (event.type === \"mousedown\") {\r\n      setshowconfimrPass({'show':\"text\", 'icon':\"screen2__eyeicon bi bi-eye\"})\r\n    } else {\r\n      setshowconfimrPass({'show':\"password\", 'icon':\"screen2__eyeicon bi bi-eye-slash\"})\r\n    } \r\n  }\r\n\r\n  //useEffect para que ejecute el cambio del step-progress-bar\r\n  useEffect(() => {\r\n      setActiveStep(1);\r\n  }, [setActiveStep])\r\n  \r\n  /* reglas de validación del formulario */\r\n  const validate = Yup.object({\r\n    password: Yup.string()\r\n      .min(8, 'La contraseña debe poseer al menos 8 caracteres')\r\n      .required('La contraseña es requerida')\r\n      .matches(\r\n        /^.*((?=.*[0-9]){1}).*$/,\r\n        \"La contraseña debe poseer al menos un número\"\r\n      )\r\n      .matches(\r\n        /^.*((?=.*[A-Z]){1}).*$/,\r\n        \"La contraseña debe poseer al menos una mayúscula\"\r\n      ).matches(\r\n        /^.*((?=.*[a-z]){1}).*$/,\r\n        \"La contraseña debe poseer al menos una minúscula\"\r\n      ),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Las contraseñas deben coincidir')\r\n      .required('La confirmación de contraseña es requerida'),\r\n    pista: Yup.string()\r\n      .max(255, 'La pista no puede superar los 255 caracteres')\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <img src={triangulo} alt=\"triangulo\" className=\"screen2__triangulo\" />  {/* Imagen triangular que señala en que paso del step-progressbar nos encontramos */}\r\n      {isLoading && <Loading />} {/* cuando isLoading está en true se mostrará el componente Loading */}\r\n      <div className=\"base__container\">\r\n        <div className=\"base__content animate__animated animate__fadeIn\">\r\n          <h1>Crea tu Password Manager</h1>\r\n          <div className=\"base__underline\"></div>\r\n          <h3>\r\n            En primer lugar, debes crear una contraseña diferente para tus pertenencias electrónicas. <br/>\r\n            No podrás recuperar tu contraseña, así que recuérdala bien.\r\n          </h3>\r\n          \r\n          <Formik /* control de los campos del formulario, indicando valores iniciales para cada campo */\r\n            initialValues={{\r\n              password: '',\r\n              confirmPassword: '',\r\n              pista: '',\r\n            }}\r\n      \r\n            validationSchema={validate} /* se ingresan las reglas de validación de formulario que ya se declararon */\r\n\r\n            onSubmit={values => {   /* llamado a la API pasando los valores recogidos del formulario */\r\n              setisLoading(true); /* se controla la interfaz de usuario con una pantalla de loading */\r\n              submitForm(values.password, values.confirmPassword, values.pista)\r\n              .then(response => setapiresponse(response)) /* Se guardan los valores de la respuesta en el context para que luego los tome la pantalla de feedback */\r\n              .catch(function(err) {\r\n                console.log(err); //si bien el manejo del error es tenido en cuenta ya que en la pantalla de feedback mostrará que no se puedo crear Password Manager hago un console.log del error por control de programación\r\n              })\r\n              .finally(\r\n                setTimeout(() => {\r\n                  setcheckpoints({...checkpoints, 'passwordAccepted':true}); /* Se setea un checkpoint de envío de contraseña para acceder a la ruta privada del feedback */\r\n                  history.push('./response'); //se redirecciona a la pantalla de feedback\r\n                }, 3020)\r\n              );\r\n            }}\r\n          >\r\n        \r\n            {formik => (\r\n              <Form>\r\n\r\n                <div className=\"screen2__rulesbox\">\r\n                  <CheckItems values={formik.values}/> {/* se pasan por props los valores del formulario en tiempo real para editar la checklist de la contaseña */}\r\n                </div>\r\n                \r\n                {/* input de la contraseña y la confirmación de contraseña, con los iconos \"eye\" con los manejadores de eventos*/}\r\n                <div className=\"screen2__passwordsbox\">\r\n                  \r\n                    <TextField label=\"Crea tu Contraseña Maestra\" name=\"password\" type={showPass.show} placeholder=\"Elige una contraseña\"/>\r\n                  <div className=\"screen2__eyeiconbox\">\r\n                    <i onMouseDown={handleShowPass} onMouseLeave={handleShowPass} onMouseUp={handleShowPass} className={showPass.icon}></i>\r\n                  </div>\r\n                  \r\n                    <TextField label=\"Repite tu Contraseña Maestra\" name=\"confirmPassword\" type={showconfimrPass.show} placeholder=\"Repite tu contraseña\"/>\r\n                  <div className=\"screen2__eyeiconbox\">\r\n                    <i onMouseDown={handleShowconfirmPass} onMouseLeave={handleShowconfirmPass} onMouseUp={handleShowconfirmPass} className={showconfimrPass.icon}></i>\r\n                  </div>\r\n                  \r\n                </div>\r\n\r\n                {/* input de la pista con un tooltip indicando cuantos caracteres puede escribir */}\r\n                <div className=\"screen2__pistabox\">\r\n                  <h3>También puedes crear una pista que te ayude a recordar tu contraseña maestra. &nbsp; \r\n                    <Tooltip title=\"Solo admite hasta 255 caracteres\" placement=\"top\" arrow><i className=\"bi bi-info-circle screen2__infoicon\"></i></Tooltip>\r\n                  </h3>\r\n                  <TextField label=\"Crea tu pista para recordar tu contraseña maestra (opcional)\" maxLength=\"255\" name=\"pista\" type=\"text\" placeholder=\"Introduce tu pista\"/>\r\n                  <div className=\"screen2__contadorbox\"><h3 className=\"screen2__contador\">{formik.values.pista.length}/255</h3></div>\r\n                </div>\r\n                \r\n                {/* botones de cancelación y el boton submit del formulario, se deshabilitan cuando está la pantalla de loading */}\r\n                <div className=\"base__buttonbox\">\r\n                  <button disabled={isLoading} className=\"btn btn-light\" type=\"reset\" onClick={handleReturnHome}>Cancelar</button>\r\n                  <button disabled={isLoading} className=\"btn btn-primary\" type=\"submit\">Siguiente <i className=\"bi bi-chevron-right\"></i></button>\r\n                </div>\r\n\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div> \r\n    </>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}