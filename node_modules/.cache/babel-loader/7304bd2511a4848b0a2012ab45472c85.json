{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { CheckItems } from './CheckItems';\nimport { Context } from './Context';\nexport const CreatePasswordScreen = () => {\n  /*  const history = useHistory();     \r\n     const {checkpoints, setcheckpoints, setActiveStep} = useContext (Context);\r\n     useEffect(() => {\r\n       setActiveStep(1);\r\n   }, [])\r\n     const [loading, setloading] = useState(false);\r\n     const handleReturnHome = () =>{\r\n     setcheckpoints({...checkpoints, 'acceptContract':false})\r\n     history.push('./');\r\n   }\r\n     const validate = Yup.object({\r\n       password: Yup.string()\r\n     .min(8, 'Password must be at least 8 charaters')\r\n     .required('Password is required')\r\n     .matches(\r\n       /^.*((?=.*[0-9]){1}).*$/,\r\n       \"Password must contain at least one number\"\r\n     )\r\n     .matches(\r\n       /^.*((?=.*[A-Z]){1}).*$/,\r\n       \"Password must contain at least one uppercase\"\r\n     ).matches(\r\n       /^.*((?=.*[a-z]){1}).*$/,\r\n       \"Password must contain at least one lowercase\"\r\n     ),\r\n   confirmPassword: Yup.string()\r\n     .oneOf([Yup.ref('password'), null], 'Password must match')\r\n     .required('Confirm password is required'),\r\n   pista: Yup.string()\r\n     .max(255, 'La pista no puede superar los 255 caracteres')\r\n     \r\n   })\r\n  */\n  return {\n    /* <div className=\"base__container\">\r\n     <div className=\"base__content\">\r\n       <h1>Crea tu Password Manager</h1>\r\n       <div className=\"base__underline\"></div>\r\n       <h3>\r\n         En primer lugar, debes crear una contraseña diferente para tus pertenencias electrónicas. <br/>\r\n         No podrás recuperar tu contraseña, así que recuérdala bien.\r\n       </h3>\r\n       \r\n         <Formik\r\n             initialValues={{\r\n                 password: '',\r\n                 confirmPassword: ''\r\n             }}\r\n         \r\n             validationSchema={validate}\r\n               onSubmit={values => {\r\n                 if(checkpoints.passwordAccepted===false)\r\n                 {setcheckpoints({...checkpoints, 'passwordAccepted':true})}\r\n                 //else{setcheckpoints({...checkpoints, 'passwordAccepted':false})};\r\n                 \r\n                   history.push('./response');\r\n                 \r\n             }}\r\n         >\r\n     \r\n             {formik => (\r\n                 <Form>\r\n                     <CheckItems values={formik.values}/>\r\n                     <TextField label=\"Crea tu Contraseña Maestra\" name=\"password\" type=\"password\"  placeholder=\"Elige una contraseña\"/>\r\n                     <TextField label=\"Repite tu Contraseña Maestra\" name=\"confirmPassword\" type=\"password\" placeholder=\"Repite tu contraseña\"/>\r\n                     <h3>También puedes crear una pista que te ayude a recordar tu contraseña maestra. <i class=\"bi bi-info-circle screen3__infoicon\"></i></h3>\r\n                     <TextField label=\"Crea tu pista para recordar tu contraseña maestra (opcional)\" name=\"pista\" type=\"text\" placeholder=\"Introduce tu pista\"/>\r\n                     <button className=\"btn btn-primary\" type=\"submit\">Siguiente <i class=\"bi bi-chevron-right\"></i></button>\r\n                     <button className=\"btn btn-light\" onClick={handleReturnHome}>Cancelar</button>\r\n                 </Form>\r\n             )}\r\n         </Formik>\r\n     </div>\r\n    </div> */\n  };\n};","map":{"version":3,"sources":["C:\\Users\\cocci\\Desktop\\react\\openbankbase\\ok-test-main\\src\\components\\CreatePasswordScreen.js"],"names":["React","useContext","useState","useEffect","useHistory","Formik","Form","Yup","TextField","CheckItems","Context","CreatePasswordScreen"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,QAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCD,SAEE;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAD,GAFF;AA4CD,CApFM","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {Formik, Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextField } from './TextField';\r\nimport { CheckItems } from './CheckItems';\r\nimport { Context } from './Context';\r\n\r\n\r\nexport const CreatePasswordScreen = () => {\r\n\r\n   /*  const history = useHistory();     \r\n\r\n    const {checkpoints, setcheckpoints, setActiveStep} = useContext (Context);\r\n\r\n    useEffect(() => {\r\n        setActiveStep(1);\r\n    }, [])\r\n\r\n    const [loading, setloading] = useState(false);\r\n\r\n    const handleReturnHome = () =>{\r\n      setcheckpoints({...checkpoints, 'acceptContract':false})\r\n      history.push('./');\r\n    }\r\n\r\n    const validate = Yup.object({\r\n        password: Yup.string()\r\n      .min(8, 'Password must be at least 8 charaters')\r\n      .required('Password is required')\r\n      .matches(\r\n        /^.*((?=.*[0-9]){1}).*$/,\r\n        \"Password must contain at least one number\"\r\n      )\r\n      .matches(\r\n        /^.*((?=.*[A-Z]){1}).*$/,\r\n        \"Password must contain at least one uppercase\"\r\n      ).matches(\r\n        /^.*((?=.*[a-z]){1}).*$/,\r\n        \"Password must contain at least one lowercase\"\r\n      ),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Password must match')\r\n      .required('Confirm password is required'),\r\n    pista: Yup.string()\r\n      .max(255, 'La pista no puede superar los 255 caracteres')\r\n      \r\n    })\r\n */\r\n  return (\r\n  \r\n    {/* <div className=\"base__container\">\r\n      <div className=\"base__content\">\r\n        <h1>Crea tu Password Manager</h1>\r\n        <div className=\"base__underline\"></div>\r\n        <h3>\r\n          En primer lugar, debes crear una contraseña diferente para tus pertenencias electrónicas. <br/>\r\n          No podrás recuperar tu contraseña, así que recuérdala bien.\r\n        </h3>\r\n        \r\n          <Formik\r\n              initialValues={{\r\n                  password: '',\r\n                  confirmPassword: ''\r\n              }}\r\n          \r\n              validationSchema={validate}\r\n\r\n              onSubmit={values => {\r\n                  if(checkpoints.passwordAccepted===false)\r\n                  {setcheckpoints({...checkpoints, 'passwordAccepted':true})}\r\n                  //else{setcheckpoints({...checkpoints, 'passwordAccepted':false})};\r\n                  \r\n                    history.push('./response');\r\n                  \r\n              }}\r\n          >\r\n      \r\n              {formik => (\r\n                  <Form>\r\n                      <CheckItems values={formik.values}/>\r\n                      <TextField label=\"Crea tu Contraseña Maestra\" name=\"password\" type=\"password\"  placeholder=\"Elige una contraseña\"/>\r\n                      <TextField label=\"Repite tu Contraseña Maestra\" name=\"confirmPassword\" type=\"password\" placeholder=\"Repite tu contraseña\"/>\r\n                      <h3>También puedes crear una pista que te ayude a recordar tu contraseña maestra. <i class=\"bi bi-info-circle screen3__infoicon\"></i></h3>\r\n                      <TextField label=\"Crea tu pista para recordar tu contraseña maestra (opcional)\" name=\"pista\" type=\"text\" placeholder=\"Introduce tu pista\"/>\r\n                      <button className=\"btn btn-primary\" type=\"submit\">Siguiente <i class=\"bi bi-chevron-right\"></i></button>\r\n                      <button className=\"btn btn-light\" onClick={handleReturnHome}>Cancelar</button>\r\n                  </Form>\r\n              )}\r\n          </Formik>\r\n      </div>\r\n    </div> */}\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}