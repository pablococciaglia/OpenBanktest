{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cocci\\\\Desktop\\\\react\\\\openbankbase\\\\ok-test-main\\\\src\\\\components\\\\CreatePasswordScreen.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { CheckItems } from './CheckItems';\nimport { Context } from './Context';\nexport const CreatePasswordScreen = () => {\n  const history = useHistory();\n  const {\n    checkpoints,\n    setcheckpoints,\n    setActiveStep\n  } = useContext(Context);\n  useEffect(() => {\n    setActiveStep(1);\n  }, []);\n  const [loading, setloading] = useState(false);\n\n  const handleReturnHome = () => {\n    setcheckpoints({ ...checkpoints,\n      'acceptContract': false\n    });\n    history.push('./');\n  };\n\n  const validate = Yup.object({\n    password: Yup.string().min(8, 'Password must be at least 8 charaters').required('Password is required').matches(/^.*((?=.*[0-9]){1}).*$/, \"Password must contain at least one number\").matches(/^.*((?=.*[A-Z]){1}).*$/, \"Password must contain at least one uppercase\").matches(/^.*((?=.*[a-z]){1}).*$/, \"Password must contain at least one lowercase\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Password must match').required('Confirm password is required'),\n    pista: Yup.string().max(255, 'La pista no puede superar los 255 caracteres')\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Crea tu Password Manager\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"base__underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"En primer lugar, debes crear una contrase\\xF1a diferente para tus pertenencias electr\\xF3nicas. \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 101\n    }\n  }), \"No podr\\xE1s recuperar tu contrase\\xF1a, as\\xED que recu\\xE9rdala bien.\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      password: '',\n      confirmPassword: '',\n      pista: ''\n    },\n    validationSchema: validate,\n    onSubmit: values => {\n      fetch('../services/api.js', {\n        method: 'POST',\n        body: JSON.stringify(values)\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n      });\n      /* if(checkpoints.passwordAccepted===false)\r\n      {setcheckpoints({...checkpoints, 'passwordAccepted':true})}\r\n      history.push('./response'); */\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, formik => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CheckItems, {\n    values: formik.values,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Crea tu Contrase\\xF1a Maestra\",\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Elige una contrase\\xF1a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Repite tu Contrase\\xF1a Maestra\",\n    name: \"confirmPassword\",\n    type: \"password\",\n    placeholder: \"Repite tu contrase\\xF1a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }, \"Tambi\\xE9n puedes crear una pista que te ayude a recordar tu contrase\\xF1a maestra. \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-info-circle screen3__infoicon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 105\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    label: \"Crea tu pista para recordar tu contrase\\xF1a maestra (opcional)\",\n    name: \"pista\",\n    type: \"text\",\n    placeholder: \"Introduce tu pista\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 23\n    }\n  }, \"Siguiente \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-chevron-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 83\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-light\",\n    onClick: handleReturnHome,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 23\n    }\n  }, \"Cancelar\")))));\n};","map":{"version":3,"sources":["C:/Users/cocci/Desktop/react/openbankbase/ok-test-main/src/components/CreatePasswordScreen.js"],"names":["React","useContext","useState","useEffect","useHistory","Formik","Form","Yup","TextField","CheckItems","Context","CreatePasswordScreen","history","checkpoints","setcheckpoints","setActiveStep","loading","setloading","handleReturnHome","push","validate","object","password","string","min","required","matches","confirmPassword","oneOf","ref","pista","max","values","fetch","method","body","JSON","stringify","then","response","json","data","console","log","formik"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {Formik, Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextField } from './TextField';\r\nimport { CheckItems } from './CheckItems';\r\nimport { Context } from './Context';\r\n\r\n\r\nexport const CreatePasswordScreen = () => {\r\n\r\n     const history = useHistory();     \r\n\r\n    const {checkpoints, setcheckpoints, setActiveStep} = useContext (Context);\r\n\r\n    useEffect(() => {\r\n        setActiveStep(1);\r\n    }, [])\r\n\r\n    const [loading, setloading] = useState(false);\r\n\r\n    const handleReturnHome = () =>{\r\n      setcheckpoints({...checkpoints, 'acceptContract':false})\r\n      history.push('./');\r\n    }\r\n\r\n    const validate = Yup.object({\r\n        password: Yup.string()\r\n      .min(8, 'Password must be at least 8 charaters')\r\n      .required('Password is required')\r\n      .matches(\r\n        /^.*((?=.*[0-9]){1}).*$/,\r\n        \"Password must contain at least one number\"\r\n      )\r\n      .matches(\r\n        /^.*((?=.*[A-Z]){1}).*$/,\r\n        \"Password must contain at least one uppercase\"\r\n      ).matches(\r\n        /^.*((?=.*[a-z]){1}).*$/,\r\n        \"Password must contain at least one lowercase\"\r\n      ),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Password must match')\r\n      .required('Confirm password is required'),\r\n    pista: Yup.string()\r\n      .max(255, 'La pista no puede superar los 255 caracteres')\r\n      \r\n    })\r\n \r\n  return (\r\n  \r\n     <div className=\"base__container\">\r\n      <div className=\"base__content\">\r\n        <h1>Crea tu Password Manager</h1>\r\n        <div className=\"base__underline\"></div>\r\n        <h3>\r\n          En primer lugar, debes crear una contraseña diferente para tus pertenencias electrónicas. <br/>\r\n          No podrás recuperar tu contraseña, así que recuérdala bien.\r\n        </h3>\r\n        \r\n          <Formik\r\n              initialValues={{\r\n                  password: '',\r\n                  confirmPassword: '',\r\n                  pista: '',\r\n              }}\r\n          \r\n              validationSchema={validate}\r\n\r\n              onSubmit={values => {\r\n                fetch('../services/api.js',{\r\n                  method: 'POST', body: JSON.stringify(values)\r\n                })\r\n                .then(response => response.json())\r\n                .then (data=>{ console.log(data)\r\n                })  \r\n                \r\n                \r\n                /* if(checkpoints.passwordAccepted===false)\r\n                {setcheckpoints({...checkpoints, 'passwordAccepted':true})}\r\n                history.push('./response'); */\r\n                  \r\n              }}\r\n          >\r\n      \r\n              {formik => (\r\n                  <Form>\r\n                      <CheckItems values={formik.values}/>\r\n                      <TextField label=\"Crea tu Contraseña Maestra\" name=\"password\" type=\"password\"  placeholder=\"Elige una contraseña\"/>\r\n                      <TextField label=\"Repite tu Contraseña Maestra\" name=\"confirmPassword\" type=\"password\" placeholder=\"Repite tu contraseña\"/>\r\n                      <h3>También puedes crear una pista que te ayude a recordar tu contraseña maestra. <i className=\"bi bi-info-circle screen3__infoicon\"></i></h3>\r\n                      <TextField label=\"Crea tu pista para recordar tu contraseña maestra (opcional)\" name=\"pista\" type=\"text\" placeholder=\"Introduce tu pista\"/>\r\n                      <button className=\"btn btn-primary\" type=\"submit\">Siguiente <i className=\"bi bi-chevron-right\"></i></button>\r\n                      <button className=\"btn btn-light\" onClick={handleReturnHome}>Cancelar</button>\r\n                  </Form>\r\n              )}\r\n          </Formik>\r\n      </div>\r\n    </div> \r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}